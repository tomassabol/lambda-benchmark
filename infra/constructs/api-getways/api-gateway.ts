import {
  BaseConstruct,
  type IBaseConstruct,
  RestApiSimplePattern,
  type RestApiSimplePatternProps,
} from "@gymbeam/cdk-template"
import * as apigateway from "aws-cdk-lib/aws-apigateway"
import * as iam from "aws-cdk-lib/aws-iam"
import type * as lambda from "aws-cdk-lib/aws-lambda"
import * as logs from "aws-cdk-lib/aws-logs"
import * as secretsmanager from "aws-cdk-lib/aws-secretsmanager"
import * as customResource from "aws-cdk-lib/custom-resources"

import { DEFAULT_API_GATEWAY_PROPS } from "../defaults/default-api-gateway-props"

export class RestApiGateway extends BaseConstruct {
  public api: apigateway.RestApi
  public root: apigateway.IResource

  constructor(
    scope: IBaseConstruct,
    id: string,
    props: {
      apiFunction: lambda.IFunction
      options?: RestApiSimplePatternProps
    },
  ) {
    super(scope, id)

    const restApi = new RestApiSimplePattern(this, id, {
      ...DEFAULT_API_GATEWAY_PROPS,
      ...props.options,
    })

    this.api = restApi.api
    this.root = restApi.root

    const apiKey = this.createOrImportApiKey(restApi)

    /**
     * Save api url and key to SSM in order to facilitate integration tests
     */

    if (this.stageName !== "prod") {
      restApi.saveToSSMParameters("lambda-performance-benchmark", { apiKey })
    }

    const reservations = this.root.addResource("{proxy+}")

    reservations.addMethod(
      "ANY",
      new apigateway.LambdaIntegration(props.apiFunction),
    )
  }

  /**
   * Get API key value randomly generated by API Gateway
   *
   * See https://stackoverflow.com/a/71378581/18672955
   */

  private getApiKeyValue(apiKey: apigateway.IApiKey) {
    const apiKeyResource: customResource.AwsSdkCall = {
      service: "APIGateway",
      action: "getApiKey",
      parameters: {
        apiKey: apiKey.keyId,
        includeValue: true,
      },
      physicalResourceId: customResource.PhysicalResourceId.of(
        `APIKey:${apiKey.keyId}`,
      ),
    }

    const apiKeyCr = new customResource.AwsCustomResource(this, "api-key-cr", {
      policy: customResource.AwsCustomResourcePolicy.fromStatements([
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          resources: [apiKey.keyArn],
          actions: ["apigateway:GET"],
        }),
      ]),
      logRetention: logs.RetentionDays.ONE_DAY,
      onCreate: apiKeyResource,
      onUpdate: apiKeyResource,
      // installLatestAwsSdk: false,
    })

    apiKeyCr.node.addDependency(apiKey)
    const apiKeyValue = apiKeyCr.getResponseField("value")
    return apiKeyValue
  }

  /**
   * Create or import API key
   *
   * Note that it is not possible to create two API keys in the same API Gateway having the same value.
   * If we want to use the same API key across different APIs in one AWS account we must import existing keys
   * in the stack
   */

  private createOrImportApiKey(
    restApi: RestApiSimplePattern,
  ): apigateway.IApiKey {
    const useApiKeyId = this.getStackConfigParameter({
      name: "useApiKeyId",
      type: "string",
    })

    if (useApiKeyId) {
      const apiKey = apigateway.ApiKey.fromApiKeyId(
        this,
        "imported-key",
        useApiKeyId,
      )
      restApi.defaultUsagePlan.addApiKey(apiKey)
      return apiKey
    } else {
      const apiKeySecretName = `${this.stageName}/${this.projectName}/api-key`
      const secret = secretsmanager.Secret.fromSecretNameV2(
        this,
        "secret-api-key",
        apiKeySecretName,
      )

      const apiKeyValue = secret.secretValue.unsafeUnwrap()

      const apiKey = restApi.addApiKey("api-key", {
        value: apiKeyValue,
      })
      return apiKey
    }
  }
}
